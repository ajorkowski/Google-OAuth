// Generated by CoffeeScript 1.3.3
(function() {
  var OAuth,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.OAuth = OAuth = (function() {

    function OAuth(window) {
      var data, redirectUrl, scope;
      this.window = window;
      this.findParams = __bind(this.findParams, this);

      this.authenticate = __bind(this.authenticate, this);

      this.clientId = 'yourappid.apps.googleusercontent.com';
      scope = 'https://www.google.com/calendar/feeds/';
      redirectUrl = 'http://www.yourwebsite.com/';
      this.accessToken = ko.observable();
      data = $.param({
        response_type: 'token',
        client_id: this.clientId,
        redirect_uri: encodeURI(redirectUrl),
        scope: encodeURI(scope)
      });
      this.initialUrl = 'https://accounts.google.com/o/oauth2/auth?' + data;
      this.validationUrl = 'https://www.googleapis.com/oauth2/v1/tokeninfo';
    }

    OAuth.prototype.authenticate = function(cb) {
      var error, params, token,
        _this = this;
      params = this.findParams();
      error = params['error'];
      this.window.location.hash = "";
      if (error === 'access_denied') {
        return cb(false);
      }
      token = params['access_token'];
      if (!(token != null)) {
        this.window.location = this.initialUrl;
        return;
      }
      return $.ajax(this.validationUrl, {
        crossDomain: true,
        data: {
          access_token: token
        },
        dataType: 'jsonp'
      }).fail(function() {
        return cb(false);
      }).done(function(data) {
        if (!(data.error != null) && data.audience === _this.clientId) {
          _this.accessToken(token);
          return cb(true);
        } else {
          return cb(false);
        }
      });
    };

    OAuth.prototype.findParams = function() {
      var m, params, queryString, regex;
      params = {};
      queryString = this.window.location.hash.substring(1);
      regex = /([^&=]+)=([^&]*)/g;
      while ((m = regex.exec(queryString))) {
        params[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);
      }
      return params;
    };

    return OAuth;

  })();

}).call(this);
